#region VEXcode Generated Robot Configuration
#10/10/2022 make sure to call define statements in main (we have not done it yet)
from vex import *
import urandom

# Brain should be defined by default
brain=Brain()


# Robot configuration code
sensors_array = Triport(Ports.PORT20)

LeftWheelMotor1 = Motor29(brain.three_wire_port.c, False)
LeftWheelMotor2 = Motor29(brain.three_wire_port.h, False)

RightWheelMotor1 = Motor29(brain.three_wire_port.a, False)
RightWheelMotor2 = Motor29(brain.three_wire_port.b, False)

Conveyor1 = Motor29(brain.three_wire_port.g, False) #Y BUTTON

ConveyorIntakeWheels = Motor29(brain.three_wire_port.e, False) #INTAKE, RUNS WITH CONVEYOR 1 AT SAME TIME

Conveyor2 = Motor29(brain.three_wire_port.d, False)#A BUTTON, SHOOTER

Lift = Motor29(brain.three_wire_port.f, False)# DOWN=HOME, RIGHT=LEVEL2, UP=LEVEL3, LEFT=LEVEL4, 

controller_1 = Controller(PRIMARY)
controller_2 = Controller(PARTNER)

#SonicSensor = Sonar(sensors_array.a)# SonicSensor is used to help determine which level/height for lift to go to
#make 3 bumper swtiches, to tell what level to make lift go to

bumperlift1 = Bumper(sensors_array.a)
bumperlift2 = Bumper(sensors_array.b)
bumperlift3 = Bumper(sensors_array.c)

#set home
whereLiftAt=0


Bumper1 = Bumper(sensors_array.e)
Bumper2 = Bumper(sensors_array.f)

Lift.stop()
# wait for rotation sensor to fully initialize
wait(30, MSEC)
#endregion VEXcode Generated Robot Configuration


#----------------------------------------------------------------------------*/
#                                                                            */
#    Module:       OCCRA-2022-308                                            */
#    Author:       C:\Users\FRC                                              */
#    Created:      Tue Sep 29 2022                                           */
#    Description:  V5 project                                                */
#                                                                            */
#----------------------------------------------------------------------------*/

# ---- START VEXCODE CONFIGURED DEVICES ----
# LeftWheelMotor1       motor29       A
# LeftWheelMotor2       motor29       B
# LeftMotor3       motor29       C
# RightWheelMotor1      motor29       D
# RightWheelMotor2      motor29       E
# RightMotor3      motor29       F
# ---- END VEXCODE CONFIGURED DEVICES ----


def main():
    #declare speed
    global whereLiftAt
    #for failsave set to divide by 6, normal is 2; makes robot slower
    Axis3=controller_1.axis3.position()/1

    #failsave -1/6, normal -1/2
    Axis1=controller_1.axis1.position()*(.8)
    
    #controller_1.screen.set_cursor(1,1)

    #controller_1.screen.print(str(Axis1))
    #controller_1.screen.clear_screen()
    #deadzone fix
    if abs(Axis3)<2:
        Axis3=0
    if abs(Axis1)<2:
        Axis1=0

    #this declares the speeds, will go forward
    leftSpeed = Axis3
    rightSpeed = Axis3

    if Axis1 > 0:
        leftSpeed = leftSpeed + Axis1 
        rightSpeed = rightSpeed - Axis1
    elif Axis1 < 0:
        leftSpeed = leftSpeed + Axis1
        rightSpeed = rightSpeed - Axis1 



    if leftSpeed > 0:
        leftSpeed = leftSpeed +2.8
    if rightSpeed < 0:
        rightSpeed = rightSpeed -9.3

    #this will 
    #set to go left or right drivetrain
    #normal 0



    #set speeds
    #drivetrain is right sided
    driveRight(rightSpeed, PERCENT)
    driveLeft(leftSpeed, PERCENT)

    


    b1 = bumperlift1.pressing()
    b2= bumperlift2.pressing()
    b3= bumperlift3.pressing()


    
    if b1:
        whereLiftAt=1
        Lift.stop()
    if b2:
        whereLiftAt=2
        Lift.stop()
    if b3:
        whereLiftAt =3
        Lift.stop()

    #controller_1.screen.print(whereLiftAt)



    Conveyor1System(controller_1.buttonY.pressing(), controller_1.buttonR1.pressing())

    LiftSystem(controller_1.buttonDown.pressing(), controller_1.buttonRight.pressing(), controller_1.buttonUp.pressing(), controller_1.buttonLeft.pressing(), whereLiftAt)

    #BumperSystem(Bumper1.pressing(), Bumper2.pressing())

     
    Conveyor2System(controller_1.buttonA.pressing(), controller_1.buttonR1.pressing())

    liftManual(controller_1.buttonL1.pressing(), controller_1.buttonL2.pressing(), controller_1.buttonDown.pressing(), controller_1.buttonRight.pressing(), controller_1.buttonUp.pressing())
    



#drivetrain
#goes faster on one side, fix it pls 10/14/2022 uwu
def driveLeft(speed : int, units : PercentUnits):
    LeftWheelMotor1.set_velocity(int(speed), units)
    LeftWheelMotor1.spin(FORWARD)
    LeftWheelMotor2.set_velocity(int(speed), units)
    LeftWheelMotor2.spin(FORWARD)


def driveRight(speed : int, units : PercentUnits):
    RightWheelMotor1.set_velocity(int(speed), units)
    RightWheelMotor1.spin(REVERSE)
    RightWheelMotor2.set_velocity(int(speed), units)
    RightWheelMotor2.spin(REVERSE)




#Conveyor1 system
def Conveyor1System(butnY, butnR1):
    Conveyor1.set_velocity(int(100), PERCENT)
    ConveyorIntakeWheels.set_velocity(int(100), PERCENT)
    if butnY:
        if butnR1:
            direction = REVERSE
        else:
            direction = FORWARD
        Conveyor1.spin(direction)
        ConveyorIntakeWheels.spin(direction)
    else:
        Conveyor1.stop()
        ConveyorIntakeWheels.stop()

def LiftSystem(butnDown, butnRight, butnUp, butnLeft, whereLiftAtTrue):
    Lift.set_velocity(100, PERCENT)

    #lower level
    if butnDown and whereLiftAtTrue != 1:
        Lift.spin(REVERSE)

    #Middle level
    elif butnRight and whereLiftAtTrue != 2:
        if whereLiftAtTrue >2: 
            Lift.spin(REVERSE) #spin motor unitl sonic sensor reaches the correct spot
        elif whereLiftAtTrue<2:
            Lift.spin(FORWARD)
    
    #Upper level
    elif butnUp and whereLiftAtTrue != 3:
        Lift.spin(FORWARD)
    #if whereLiftAtTrue == 1 or whereLiftAtTrue == 2 or whereLiftAtTrue == 3:
        #Lift.stop()


showing1 = False
showing2 = False
def BumperSystem(bump1Pressing, bump2Pressing):
    global showing1
    global showing2
    #shows if bumpers are being pressed on the robot
    if bump1Pressing and not showing1:
        controller_1.screen.set_cursor(1,1)
        controller_2.screen.set_cursor(1,1)
        controller_1.screen.print("Bumper1: ")
        controller_1.screen.print(Bumper1.pressing())
        controller_2.screen.print("Bumper1: ")
        controller_2.screen.print(Bumper1.pressing())
        showing1 = True
    elif not bump1Pressing and showing1:
        controller_2.screen.clear_row(1)
        controller_1.screen.clear_row(1)
        showing1 = False



    if bump2Pressing and not showing2:
        controller_1.screen.set_cursor(2,1)
        controller_2.screen.set_cursor(2,1)
        controller_1.screen.print("Bumper2: ")
        controller_1.screen.print(Bumper2.pressing())
        controller_2.screen.print("Bumper2: ")
        controller_2.screen.print(Bumper2.pressing())
        showing2 = True
    elif not bump2Pressing and showing2:
        controller_2.screen.clear_row(2)
        controller_1.screen.clear_row(2)
        showing2 = False





# Conveyor2 System
def Conveyor2System(butnA, butnR1):
    if butnA:
        Conveyor2.set_velocity(85, PERCENT)
        if butnR1:
            direction = REVERSE
        else:
            direction = FORWARD
        Conveyor2.spin(direction)
    else:
        Conveyor2.stop()

# Lift system (Manual)
def liftManual(butnL1, butnL2, butnDown, butnRight, butnUp):
    if butnL1 and whereLiftAt != 3:
        Lift.set_velocity(100, PERCENT)
        Lift.spin(REVERSE)
    elif butnL2:
        Lift.set_velocity(100, PERCENT)
        Lift.spin(FORWARD)
    elif butnDown ==False and butnRight == False and butnUp == False:
        Lift.stop()
        #controller_1.screen.set_cursor(3,1)
        #controller_1.screen.print("L1 NOT PRESS")
 
while True:
    #controller_1.screen.clear_screen()
    #controller_1.screen.set_cursor(1,1)
    main()