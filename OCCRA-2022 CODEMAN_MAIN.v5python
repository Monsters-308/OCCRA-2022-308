{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\n#10/10/2022 make sure to call define statements in main (we have not done it yet)\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n\n# Robot configuration code\nsensors_array = Triport(Ports.PORT1)\n\nLeftWheelMotor1 = Motor29(brain.three_wire_port.c, False)\nLeftWheelMotor2 = Motor29(brain.three_wire_port.h, False)\n\nRightWheelMotor1 = Motor29(brain.three_wire_port.a, False)\nRightWheelMotor2 = Motor29(brain.three_wire_port.b, False)\n\nConveyor1 = Motor29(brain.three_wire_port.g, False) #Y BUTTON\n\nConveyor2 = Motor29(brain.three_wire_port.d, False)#A BUTTON, SHOOTER\n\nLift = Motor29(brain.three_wire_port.f, False)# DOWN=HOME, RIGHT=LEVEL2, UP=LEVEL3, LEFT=LEVEL4, \n\ncontroller_1 = Controller(PRIMARY)\ncontroller_2 = Controller(PARTNER)\n\nSonicSensor = Sonar(sensors_array.a)# SonicSensor is used to help determine which level/height for lift to go to\n\nBumper1 = Bumper(sensors_array.b)\nBumper2 = Bumper(sensors_array.c)\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n#endregion VEXcode Generated Robot Configuration\n\n#\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n#endregion VEXcode Generated Robot Configuration\n\n#----------------------------------------------------------------------------*/\n#                                                                            */\n#    Module:       OCCRA-2022-308                                            */\n#    Author:       C:\\Users\\FRC                                              */\n#    Created:      Tue Sep 29 2022                                           */\n#    Description:  V5 project                                                */\n#                                                                            */\n#----------------------------------------------------------------------------*/\n\n# ---- START VEXCODE CONFIGURED DEVICES ----\n# LeftWheelMotor1       motor29       A\n# LeftWheelMotor2       motor29       B\n# LeftMotor3       motor29       C\n# RightWheelMotor1      motor29       D\n# RightWheelMotor2      motor29       E\n# RightMotor3      motor29       F\n# ---- END VEXCODE CONFIGURED DEVICES ----\n\ndef main():\n    #declare speed\n    #for failsave set to divide by 6, normal is 2; makes robot slower\n    Axis3=controller_1.axis3.position()/2\n\n    #failsave -1/6, normal -1/2\n    Axis1=controller_1.axis1.position()*(-1/2)\n\n    #deadzone fix\n    if abs(Axis3)<2:\n        Axis3=0\n    if abs(Axis1)<2:\n        Axis1=0\n\n    #this declares the speeds, will go forward\n    leftSpeed = Axis3\n    rightSpeed = Axis3\n\n    #this will \n    #set to go left or right drivetrain\n    #normal 0\n    if Axis1 > 0:\n        leftSpeed = leftSpeed - Axis1 \n        rightSpeed = rightSpeed + Axis1\n    elif Axis1 < 0:\n        leftSpeed = leftSpeed - Axis1\n        rightSpeed = rightSpeed + Axis1 \n\n\n    #set speeds\n    #drivetrain is right sided, so we put in a bad fix, makes it go a bit faster\n    driveLeft(leftSpeed, PERCENT)\n    driveRight(rightSpeed, PERCENT)\n\n\n    Conveyor1System(controller_2.buttonY.pressing(), controller_2.buttonR1.pressing())\n\n    LiftSystem(SonicSensor, controller_2.buttonDown.pressing(), controller_2.buttonRight.pressing(), controller_2.buttonUp.pressing(), controller_2.buttonLeft.pressing())\n\n    BumperSystem(Bumper1.pressing(), Bumper2.pressing())\n     \n    Conveyor2System(controller_2.buttonA.pressing(), controller_2.buttonR1.pressing())\n\n    liftManual(controller_2.buttonL1.pressing(), controller_2.buttonL2.pressing())\n\n\n#drivetrain\ndef driveLeft(speed : int, units : PercentUnits):\n    LeftWheelMotor1.set_velocity(int(speed), units)\n    LeftWheelMotor1.spin(FORWARD)\n    LeftWheelMotor2.set_velocity(int(speed), units)\n    LeftWheelMotor2.spin(FORWARD)\n    brain.screen.clear_screen()\n    brain.screen.next_row()\n\n\n\n    brain.screen.print(speed)\n\ndef driveRight(speed : int, units : PercentUnits):\n\n    brain.screen.print(\" \")\n    brain.screen.print(speed)\n    RightWheelMotor1.set_velocity(int(speed), units)\n    RightWheelMotor1.spin(REVERSE)\n    RightWheelMotor2.set_velocity(int(speed), units)\n    RightWheelMotor2.spin(REVERSE)\n\n\n\n\n#Conveyor1 system\ndef Conveyor1System(butnY, butnR1):\n    Conveyor1.set_velocity(int(80), PERCENT)\n    direction = REVERSE\n    Conveyor1.spin(direction)\n    controller_2.screen.print(\"WORKING\")\n    if butnY:\n        if butnR1:\n            direction = REVERSE\n        else:\n            direction = FORWARD\n        Conveyor1.spin(direction)\n    else:\n        Conveyor1.stop()\n\ndef LiftSystem(SonicSensor, butnDown, butnRight, butnUp, butnLeft):\n    Lift.set_velocity(int(80), PERCENT)\n    #home\n    if butnDown and SonicSensor.distance(INCHES) > 50: # 50 is a placeholder for home\n        Lift.set_velocity(int(80), PERCENT)\n        Lift.spin(REVERSE)\n    #diffrent level presests\n    if butnRight:\n        if str(SonicSensor.distance(INCHES) > 2): #2 is placeholder for second level \n            Lift.spin(FORWARD) #spin motor unitl sonic sensor reaches the correct spot\n        elif str(SonicSensor.distance(INCHES) < 2):\n                Lift.spin(REVERSE)\n    if butnUp:\n        if str(SonicSensor.distance(INCHES) > 3): # 3 is placeholder\n            Lift.spin(FORWARD) #spin motor unitl sonic sensor reaches the correct spot\n        elif str(SonicSensor.distance(INCHES) < 3):\n                Lift.spin(REVERSE)\n    if butnLeft:\n        if str(SonicSensor.distance(INCHES) > 4): # 4 is placeholder\n            Lift.spin(FORWARD) #spin motor unitl sonic sensor reaches the correct spot\n        elif str(SonicSensor.distance(INCHES) < 2):\n                Lift.spin(REVERSE)\n    \n\n\n    else:\n        Lift.stop()\n\ndef BumperSystem(bump1Pressing, bump2Pressing):\n    if bump1Pressing:\n        controller_1.screen.print(\"Bumper1 is being pressed: \")\n        controller_1.screen.print(Bumper1.pressing())\n        controller_2.screen.print(\"\\nBumper1 is being pressed: \")\n        controller_2.screen.print(Bumper1.pressing())\n    if bump2Pressing:\n        controller_1.screen.print(\"\\nBumper1 is being pressed: \")\n        controller_1.screen.print(Bumper2.pressing())\n        controller_2.screen.print(\"\\nBumper1 is being pressed: \")\n        controller_2.screen.print(Bumper2.pressing())\n\n# Conveyor2 System\ndef Conveyor2System(butnA, butnR1):\n    if butnA:\n        Conveyor2.set_velocity(50, PERCENT)\n        if butnR1:\n            direction = REVERSE\n        else:\n            direction = FORWARD\n        Conveyor2.spin(direction)\n    else:\n        Conveyor2.stop()\n\n# Lift system (Manual)\ndef liftManual(butnL1, butnL2):\n    if butnL1:\n        Lift.set_velocity(20, PERCENT)\n        Lift.spin(REVERSE)\n    elif butnL2:\n        Lift.set_velocity(20, PERCENT)\n        Lift.spin(FORWARD)\n    else:\n        Lift.stop()\n \nwhile True:\n    main()","textLanguage":"python","rconfig":[],"slot":7,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}